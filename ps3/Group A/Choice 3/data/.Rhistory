# Just Experiment 6
data <- read_excel("data/study 6-accessible-feud.xlsx")
# Participant #16 should be dropped from analysis
excluded <- "16"
d <- data %>%
filter(!Subject %in% excluded) #participant exclusions
# reproduce the above results here
d %>%
group_by(Cond) %>%
summarise(M = mean(expense), CI = confint(lm(expense ~ 1), level = 0.95)) -> summary_d
View(summary_d)
View(summary_d)
# reproduce the above results here
d %>%
group_by(Cond) %>%
summarise(M = mean(expense), CI = confint(lm(expense), level = 0.95)) -> summary_d
# reproduce the above results here
d %>%
group_by(Cond) %>%
summarise(M = mean(expense), CI = confint(lm(expense ~ 1), level = 0.95)) -> summary_d
# reproduce the above results here
two.way <- aov(expense ~ Slack + Large, data = d)
summary(two.way)
install.packages("lsr")
library(lsr)
etaSquared(two.way)
summary(two.way)
files <- dir('data/Experiment 1')
dat <- data.frame()
id <- 1
for (file in files){
if(file != 'Codebook.xls'){
temp_data <- read_xls(file.path('data/Experiment 1', file))
temp_data$id <- id
id <- id + 1
temp_data <- temp_data[1:250, ]
dat <- rbind(data, temp_data)
}
}
for (file in files){
if(file != 'Codebook.xls'){
temp_data <- read_xls(file.path('data/Experiment 1', file))
temp_data$id <- id
id <- id + 1
temp_data <- temp_data[1:250, ]
data <- rbind(data, temp_data)
}
}
# This reads all the participants data (each is in a seperate xls file) in and combines them into one dataframe
# Each xls has 250 rows, the rest is their calculations using excel, which we don't want in the data
files <- dir('data/Experiment 1')
data <- data.frame()
id <- 1
for (file in files){
if(file != 'Codebook.xls'){
temp_data <- read_xls(file.path('data/Experiment 1', file))
temp_data$id <- id
id <- id + 1
temp_data <- temp_data[1:250, ]
data <- rbind(data, temp_data)
}
}
files <- dir('data/Experiment 1')
data <- data.frame()
id <- 1
for (file in files){
if(file != 'Codebook.xls'){
temp_data <- read_xls(file.path('data/Experiment 1', file))
temp_data$id <- id
id <- id + 1
temp_data <- temp_data[1:250, ]
data <- rbind(data, temp_data)
}
}
dat %>%
group_by(TaskType) %>%
summarise(M = mean(RT))
# reproduce the above results here
dats %>%
group_by(TaskType) %>%
summarise(M = mean(RT))
# reproduce the above results here
data %>%
group_by(TaskType) %>%
summarise(M = mean(RT))
# reproduce the above results here
d %>%
group_by(Cond) %>%
summarise(M = mean(expense), CI = confint(lm(expense ~ 1), level = 0.95)) -> summary_d
# Just Experiment 6
data <- read_excel("data/study 6-accessible-feud.xlsx")
# Participant #16 should be dropped from analysis
excluded <- "16"
d <- data %>%
filter(!Subject %in% excluded) #participant exclusions
# reproduce the above results here
d %>%
group_by(Cond) %>%
summarise(M = mean(expense), CI = confint(lm(expense ~ 1), level = 0.95)) -> summary_d
View(summary_d)
View(summary_d)
View(data)
View(data)
# reproduce the above results here
two.way <- aov(expense ~ Large + Slack, data = d)
summary(two.way)
etaSquared(two.way)
# reproduce the above results here
two.way <- aov(expense ~ Slack*Large, data = d)
summary(two.way)
etaSquared(two.way)
library(tidyverse) # for data munging
library(knitr) # for kable table formating
library(haven) # import and export 'SPSS', 'Stata' and 'SAS' Files
library(readxl) # import excel files
# #optional packages:
# library(broom)
# This reads all the participants data (each is in a seperate xls file) in and combines them into one dataframe
# Each xls has 250 rows, the rest is their calculations using excel, which we don't want in the data
files <- dir('data/Experiment 1')
data <- data.frame()
id <- 1
for (file in files){
if(file != 'Codebook.xls'){
temp_data <- read_xls(file.path('data/Experiment 1', file))
temp_data$id <- id
id <- id + 1
temp_data <- temp_data[1:250, ]
data <- rbind(data, temp_data)
}
}
View(data)
View(data)
# reproduce the above results here
data %>%
group_by(TrialType) %>%
summarise(mean(RT))
# reproduce the above results here
# 1 is repeat trial, 2 is switch trial
data %>%
group_by(TrialType) %>%
summarise(median(RT))
# reproduce the above results here
data %>%
group_by(TrialType) %>%
summarise(median(CorrResp))
unique(data$Prime)
# reproduce the above results here
# take the mean of the column
data %>%
group_by(TrialType) %>%
summarise(mean(CorrResp))
# reproduce the above results here
# O or 2 is non-predictive, M or 8 is switch predictive, T or 4 is repeat predictive
dat %>%
group_by(Prime) %>%
summarise(mean(RT))
# reproduce the above results here
data %>%
group_by(TrialType) %>%
summarise(mean(RespCorr))
# reproduce the above results here
# 1 is repeat trial, 2 is switch trial
data %>%
group_by(TrialType) %>%
summarise(median(RT))
# reproduce the above results here
data %>%
group_by(TrialType) %>%
summarise(mean(RespCorr))
data %>%
group_by(Prime) %>%
summarise(mean(RT))
unique(data$Prime)
data$Prime[data$Prime == "2"] <- "O"
data$Prime[data$Prime == "8"] <- "M"
data$Prime[data$Prime == "4"] <- "T"
unique(data$Prime)
# reproduce the above results here
# O or 2 is non-predictive, M or 8 is switch predictive, T or 4 is repeat predictive
data$Prime[data$Prime == "2"] <- "O"
data$Prime[data$Prime == "8"] <- "M"
data$Prime[data$Prime == "4"] <- "T"
data %>%
group_by(Prime) %>%
summarise(mean(RT))
# reproduce the above results here
# O or 2 is non-predictive, M or 8 is switch predictive, T or 4 is repeat predictive
data$Prime[data$Prime == "2"] <- "O"
data$Prime[data$Prime == "8"] <- "M"
data$Prime[data$Prime == "4"] <- "T"
data %>%
group_by(Prime) %>%
mean(RT)
# reproduce the above results here
# O or 2 is non-predictive, M or 8 is switch predictive, T or 4 is repeat predictive
data$Prime[data$Prime == "2"] <- "O"
data$Prime[data$Prime == "8"] <- "M"
data$Prime[data$Prime == "4"] <- "T"
data %>%
group_by(Prime) %>%
summarise(mean(RT))
# reproduce the above results here
data %>%
group_by(Prime) %>%
summarise(mean(RespCorr))
# reproduce the above results here
t.test(RT ~ TrialType, paired=TRUE, data=data)
# reproduce the above results here
filter(data, TrialType = 0)
# reproduce the above results here
filter(data, TrialType == 0)
# reproduce the above results here
filter(data, TrialType != 0)
# reproduce the above results here
# filter out all TrialType = 0
filter(data, TrialType != 0)
t.test(RT ~ TrialType, paired=TRUE, data=data)
t.test(RT ~ TrialType, data=data)
# reproduce the above results here
# filter out all Prime = T
filter(data, Prime != "T")
t.test(RT ~ Prime, paired=TRUE, data=data)
# reproduce the above results here
# filter out all Prime = T
filter(data, Prime != "T")
unique(data$prime)
unique(data$Prime)
# reproduce the above results here
# filter out all Prime = T
data %>%
filter(data, Prime != "T")
# reproduce the above results here
# filter out all Prime = T
filtered_data = data %>%
filter(data, Prime != "T")
# reproduce the above results here
# filter out all Prime = T
filtered_data = data %>%
filter(Prime != "T")
t.test(RT ~ Prime, paired=TRUE, data=data)
# reproduce the above results here
# filter out all Prime = T
filtered_data = data %>%
filter(Prime != "T")
t.test(RT ~ Prime, paired=TRUE, data=filtered_data)
View(filtered_data)
View(filtered_data)
t.test(RT ~ Prime, data=filtered_data)
# reproduce the above results here
# filter out Prime = T bc we only need O (non-predictive) and M (switch predictive) for this analysis
filtered_data = data %>%
filter(Prime != "T")
t.test(RT ~ Prime, paired=TRUE, data=filtered_data)
# reproduce the above results here
t.test(RespCorr ~ Prime, paired=TRUE, data=filtered_data)
# reproduce the above results here
t.test(RespCorr ~ Prime, data=filtered_data)
# reproduce the above results here
d %>%
group_by(Cond) %>%
summarise(mean(expense),confint(lm(expense ~ 1), level = 0.95)) -> summary_d
# Just Experiment 6
data <- read_excel("data/study 6-accessible-feud.xlsx")
# Participant #16 should be dropped from analysis
excluded <- "16"
d <- data %>%
filter(!Subject %in% excluded) #participant exclusions
# reproduce the above results here
d %>%
group_by(Cond) %>%
summarise(mean(expense),confint(lm(expense ~ 1), level = 0.95)) -> summary_d
View(summary_d)
View(summary_d)
# reproduce the above results here
d %>%
group_by(Cond) %>%
summarise(Mean = mean(expense),CI = confint(lm(expense ~ 1), level = 0.95)) -> summary_d
# reproduce the above results here
two.way <- aov(expense ~ Slack*Large, data = d)
summary(two.way)
etaSquared(two.way)
View(data)
View(data)
# This reads all the participants data (each is in a seperate xls file) in and combines them into one dataframe
# Each xls has 250 rows, the rest is their calculations using excel, which we don't want in the data
files <- dir('data/Experiment 1')
data <- data.frame()
id <- 1
for (file in files){
if(file != 'Codebook.xls'){
temp_data <- read_xls(file.path('data/Experiment 1', file))
temp_data$id <- id
id <- id + 1
temp_data <- temp_data[1:250, ]
data <- rbind(data, temp_data)
}
}
# reproduce the above results here
# 1 is repeat trial, 2 is switch trial
data %>%
group_by(TrialType) %>%
summarise(median(RT))
# a little bit off
# reproduce the above results here
# O or 2 is non-predictive, M or 8 is switch predictive, T or 4 is repeat predictive; need to rename some of the values to make them consistent
data$Prime[data$Prime == "2"] <- "O"
data$Prime[data$Prime == "8"] <- "M"
data$Prime[data$Prime == "4"] <- "T"
data %>%
group_by(Prime) %>%
summarise(mean(RT))
# reproduce the above results here
data %>%
group_by(Prime) %>%
summarise(mean(CorrResp))
# reproduce the above results here
data %>%
group_by(Prime) %>%
summarise(mean(RespCorr))
# reproduce the above results here
# filter out Prime = T bc we only need O (non-predictive) and M (switch predictive) for this analysis
filtered_data = data %>%
filter(Prime != "T")
t.test(RT ~ Prime, paired=TRUE, data=filtered_data)
count(data$Prime)
table(filtered_data$Prime)
# reproduce the above results here
# filter out Prime = T bc we only need O (non-predictive) and M (switch predictive) for this analysis
filtered_data = data %>%
filter(Prime != "T")
filtered_data= filtered_data[1:1166,]
t.test(RT ~ Prime, paired=TRUE, data=filtered_data)
table(filtered_data$Prime)
# reproduce the above results here
# filter out Prime = T bc we only need O (non-predictive) and M (switch predictive) for this analysis
filtered_data = data %>%
filter(Prime != "T")
t.test(RT ~ Prime, paired=TRUE, data=filtered_data)
table(filtered_data$Prime)
# I ran into an error doing a paired t-test, and I figured out that it's because there are 583 instances of M (switch predictive) but 2689 of O (non-predictive), but a paired t-test requires there to be the same number in each condition. I ended up just doing a non-paired t-test just so I at least have some type of result
t.test(RT ~ Prime, data=filtered_data)
# reproduce the above results here
t.test(RespCorr ~ Prime, data=filtered_data)
# reproduce the above results here
# filter out Prime = T bc we only need O (non-predictive) and M (switch predictive) for this analysis
filtered_data = data %>%
filter(Prime != "T")
filtered_data = filtered_data[1:20,]
# I ran into an error doing a paired t-test, and I figured out that it's because there are 583 instances of M (switch predictive) but 2689 of O (non-predictive), but a paired t-test requires there to be the same number in each condition. I ended up just doing a non-paired t-test just so I at least have some type of result
t.test(RT ~ Prime, data=filtered_data)
filtered_data = filtered_data[1:20,]
table(filtered_data$Prime)
# I ran into an error doing a paired t-test, and I figured out that it's because there are 583 instances of M (switch predictive) but 2689 of O (non-predictive), but a paired t-test requires there to be the same number in each condition. I ended up just doing a non-paired t-test just so I at least have some type of result
t.test(RT ~ Prime, data=filtered_data)
filtered_data = data %>%
filter(Prime != "T")
filtered_data = filtered_data[1:39,]
table(filtered_data$Prime)
# I ran into an error doing a paired t-test, and I figured out that it's because there are 583 instances of M (switch predictive) but 2689 of O (non-predictive), but a paired t-test requires there to be the same number in each condition. I ended up just doing a non-paired t-test just so I at least have some type of result
t.test(RT ~ Prime, paired = TRUE, data=filtered_data)
# reproduce the above results here
# filter out Prime = T bc we only need O (non-predictive) and M (switch predictive) for this analysis
filtered_data = data %>%
filter(Prime != "T")
# I ran into an error doing a paired t-test, and I figured out that it's because there are 583 instances of M (switch predictive) but 2689 of O (non-predictive), but a paired t-test requires there to be the same number in each condition. I ended up just doing a non-paired t-test just so I at least have some type of result
t.test(RT ~ Prime, data=filtered_data)
filtered_data_wide = filtered_data %>%
pivot_wider(cols=-c("id", "Prime"))
filtered_data_wide = filtered_data %>%
pivot_wider()
filtered_data_wide = filtered_data %>%
pivot_wider(names_from = Prime,
values_from = RT)
View(filtered_data_wide)
View(filtered_data_wide)
# I ran into an error doing a paired t-test, and I figured out that it's because there are 583 instances of M (switch predictive) but 2689 of O (non-predictive), but a paired t-test requires there to be the same number in each condition. I ended up just doing a non-paired t-test just so I at least have some type of result
t.test(RT ~ Prime, data=filtered_data)
# I ran into an error doing a paired t-test, and I figured out that it's because there are 583 instances of M (switch predictive) but 2689 of O (non-predictive), but a paired t-test requires there to be the same number in each condition. I ended up just doing a non-paired t-test just so I at least have some type of result
t.test(RT ~ Prime, paired=TRUE, data=filtered_data)
# reproduce the above results here
# filter out Prime = T bc we only need O (non-predictive) and M (switch predictive) for this analysis
filtered_data = data %>%
filter(Prime != "T")
data <- data[, -c(1:2)] # delete columns 1 through 8
View(filtered_data)
View(filtered_data)
filtered_data <- filtered_data[, -c(1:2)] # delete columns 1 through 8
filtered_data <- filtered_data[, -c(2:4)]
filtered_data <- filtered_data[, -c(5:17)]
filtered_data_wide = filtered_data %>%
pivot_wider(names_from = Prime,
values_from = RT)
View(filtered_data_wide)
View(filtered_data_wide)
for (file in files){
if(file != 'Codebook.xls'){
temp_data <- read_xls(file.path('data/Experiment 1', file))
temp_data$id <- id
id <- id + 1
temp_data <- temp_data[1:250, ]
data <- rbind(data, temp_data)
}
}
files <- dir('data/Experiment 1')
data <- data.frame()
id <- 1
for (file in files){
if(file != 'Codebook.xls'){
temp_data <- read_xls(file.path('data/Experiment 1', file))
temp_data$id <- id
id <- id + 1
temp_data <- temp_data[1:250, ]
data <- rbind(data, temp_data)
}
}
# reproduce the above results here
# filter out Prime = T bc we only need O (non-predictive) and M (switch predictive) for this analysis
filtered_data = data %>%
filter(Prime != "T")
filtered_data <- filtered_data[, -c(1:2)] # delete columns 1 through 8
filtered_data <- filtered_data[, -c(2:4)]
filtered_data <- filtered_data[, -c(5:17)]
View(filtered_data_wide)
# reproduce the above results here
# filter out Prime = T bc we only need O (non-predictive) and M (switch predictive) for this analysis
filtered_data = data %>%
filter(Prime != "T")
filtered_data <- filtered_data[, -c(1:2)]
filtered_data <- filtered_data[, -c(2:4)]
filtered_data <- filtered_data[, -c(5:17)]
View(filtered_data)
View(filtered_data)
filtered_data <- filtered_data[, -c(2,4)]
filtered_data_wide = filtered_data %>%
pivot_wider(names_from = id,
values_from = RT)
filtered_data = data %>%
filter(Prime != "T")
filtered_data <- filtered_data[, -c(1:2)]
filtered_data <- filtered_data[, -c(2:4)]
filtered_data <- filtered_data[, -c(5:17)]
filtered_data <- filtered_data[, -c(2,4)]
filtered_data_wide = filtered_data %>%
pivot_wider(names_from = Prime,
values_from = id)
filtered_data_wide = filtered_data %>%
pivot_wider(names_from = RT,
values_from = id)
filtered_data_wide = filtered_data %>%
pivot_wider(names_from = Prime,
values_from = RT)
# I ran into an error doing a paired t-test, and I figured out that it's because there are 583 instances of M (switch predictive) but 2689 of O (non-predictive), but a paired t-test requires there to be the same number in each condition. I ended up just doing a non-paired t-test just so I at least have some type of result
t.test(RT ~ Prime, paired=TRUE, data=filtered_data)
filtered_data_wide = filtered_data %>%
pivot_wider(names_from = Prime,
values_from = RT)
# reproduce the above results here
# filter out Prime = T bc we only need O (non-predictive) and M (switch predictive) for this analysis
filtered_data = data %>%
filter(Prime != "T")
filtered_data_wide = filtered_data %>%
pivot_wider(names_from = Prime,
values_from = RT)
filtered_data_wide = filtered_data %>%
pivot_wider(names_from = Prime,
values_from = RT)
# I ran into an error doing a paired t-test, and I figured out that it's because there are 583 instances of M (switch predictive) but 2689 of O (non-predictive), but a paired t-test requires there to be the same number in each condition. I ended up just doing a non-paired t-test just so I at least have some type of result
t.test(RT ~ Prime, paired=TRUE, data=filtered_data)
data_path <- 'data/DeLaFuenteEtAl_2014_RawData.xls'
d <- read_excel(data_path, sheet=3)
View(d)
filtered_data_wide = filtered_data %>%
pivot_wider(names_from = Prime,
values_from = RT)
filtered_data_wide = filtered_data %>%
pivot_wider(names_from = id,
values_from = Prime)
filtered_data_wide = filtered_data %>%
pivot_wider(names_from = RT,
values_from = Prime)
filtered_data_wide = filtered_data %>%
pivot_wider(names_from = id,
values_from = RT)
filtered_data_wide = filtered_data %>%
pivot_wider(names_from = Prime,
values_from = id)
data$Prime[data$Prime == "2"] <- "O"
data$Prime[data$Prime == "8"] <- "M"
data$Prime[data$Prime == "4"] <- "T"
# reproduce the above results here
# filter out Prime = T bc we only need O (non-predictive) and M (switch predictive) for this analysis
filtered_data = data %>%
filter(Prime != "T")
filtered_data_wide = filtered_data %>%
pivot_wider(names_from = Prime,
values_from = id)
# I ran into an error doing a paired t-test, and I figured out that it's because there are 583 instances of M (switch predictive) but 2689 of O (non-predictive), but a paired t-test requires there to be the same number in each condition. I ended up just doing a non-paired t-test just so I at least have some type of result
t.test(RT ~ Prime, paired=TRUE, data=filtered_data)
filtered_data_wide = filtered_data %>%
pivot_wider(cols=-c("id"),
names_from = Prime,
values_from = RT)
# reproduce the above results here
data %>%
group_by(Prime) %>%
summarise(mean(RT))
# reproduce the above results here
# 1 is repeat trial, 2 is switch trial
data %>%
group_by(TrialType) %>%
summarise(median(RT))
